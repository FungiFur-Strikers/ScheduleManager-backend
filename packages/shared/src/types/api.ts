/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ユーザー登録
         * @description 新規ユーザーを登録します
         */
        post: operations["signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ログイン
         * @description 登録済みユーザーのログイン認証
         */
        post: operations["signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * トークンの更新
         * @description リフレッシュトークンを使用して新しいアクセストークンを取得
         */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ログアウト
         * @description ユーザーのログアウト処理
         */
        post: operations["signOut"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 自分のユーザー情報取得
         * @description ログインユーザー自身の情報を取得します
         */
        get: operations["getMyUserInfo"];
        /**
         * 自分のユーザー情報更新
         * @description ログインユーザー自身の情報を更新します
         */
        put: operations["updateMyUserInfo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ユーザー設定取得
         * @description ログインユーザーの設定情報を取得します
         */
        get: operations["getUserSettings"];
        /**
         * ユーザー設定更新
         * @description ログインユーザーの設定情報を更新します
         */
        put: operations["updateUserSettings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * スケジュール帳一覧取得
         * @description ログインユーザーのスケジュール帳一覧を取得します
         */
        get: operations["getBooks"];
        put?: never;
        /**
         * スケジュール帳作成
         * @description 新しいスケジュール帳を作成します
         */
        post: operations["createBook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        /**
         * スケジュール帳詳細取得
         * @description 指定されたIDのスケジュール帳詳細を取得します
         */
        get: operations["getBookById"];
        /**
         * スケジュール帳更新
         * @description 指定されたIDのスケジュール帳を更新します
         */
        put: operations["updateBook"];
        post?: never;
        /**
         * スケジュール帳削除
         * @description 指定されたIDのスケジュール帳を削除します
         */
        delete: operations["deleteBook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/categories": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        /**
         * カテゴリ一覧取得
         * @description 指定されたスケジュール帳のカテゴリ一覧を取得します
         */
        get: operations["getCategories"];
        put?: never;
        /**
         * カテゴリ作成
         * @description 指定されたスケジュール帳に新しいカテゴリを作成します
         */
        post: operations["createCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/categories/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description カテゴリID */
                categoryId: number;
            };
            cookie?: never;
        };
        /**
         * カテゴリ詳細取得
         * @description 指定されたIDのカテゴリ詳細を取得します
         */
        get: operations["getCategoryById"];
        /**
         * カテゴリ更新
         * @description 指定されたIDのカテゴリを更新します
         */
        put: operations["updateCategory"];
        post?: never;
        /**
         * カテゴリ削除
         * @description 指定されたIDのカテゴリを削除します
         */
        delete: operations["deleteCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/categories/{categoryId}/subcategories": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description カテゴリID */
                categoryId: number;
            };
            cookie?: never;
        };
        /**
         * サブカテゴリ一覧取得
         * @description 指定されたカテゴリのサブカテゴリ一覧を取得します
         */
        get: operations["getSubcategories"];
        put?: never;
        /**
         * サブカテゴリ作成
         * @description 指定されたカテゴリに新しいサブカテゴリを作成します
         */
        post: operations["createSubcategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/categories/{categoryId}/subcategories/{subcategoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description カテゴリID */
                categoryId: number;
                /** @description サブカテゴリID */
                subcategoryId: number;
            };
            cookie?: never;
        };
        /**
         * サブカテゴリ詳細取得
         * @description 指定されたIDのサブカテゴリ詳細を取得します
         */
        get: operations["getSubcategoryById"];
        /**
         * サブカテゴリ更新
         * @description 指定されたIDのサブカテゴリを更新します
         */
        put: operations["updateSubcategory"];
        post?: never;
        /**
         * サブカテゴリ削除
         * @description 指定されたIDのサブカテゴリを削除します
         */
        delete: operations["deleteSubcategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        /**
         * スケジュール一覧取得
         * @description 指定されたスケジュール帳のスケジュール一覧を取得します
         */
        get: operations["getSchedules"];
        put?: never;
        /**
         * スケジュール作成
         * @description 指定されたスケジュール帳に新しいスケジュールを作成します
         */
        post: operations["createSchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/schedules/{scheduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description スケジュールID */
                scheduleId: number;
            };
            cookie?: never;
        };
        /**
         * スケジュール詳細取得
         * @description 指定されたIDのスケジュール詳細を取得します
         */
        get: operations["getScheduleById"];
        /**
         * スケジュール更新
         * @description 指定されたIDのスケジュールを更新します
         */
        put: operations["updateSchedule"];
        post?: never;
        /**
         * スケジュール削除
         * @description 指定されたIDのスケジュールを削除します
         */
        delete: operations["deleteSchedule"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/works": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        /**
         * 案件一覧取得
         * @description 指定されたスケジュール帳の案件一覧を取得します
         */
        get: operations["getWorks"];
        put?: never;
        /**
         * 案件作成
         * @description 指定されたスケジュール帳に新しい案件を作成します
         */
        post: operations["createWork"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/works/{workId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description 案件ID */
                workId: number;
            };
            cookie?: never;
        };
        /**
         * 案件詳細取得
         * @description 指定されたIDの案件詳細を取得します
         */
        get: operations["getWorkById"];
        /**
         * 案件更新
         * @description 指定されたIDの案件を更新します
         */
        put: operations["updateWork"];
        post?: never;
        /**
         * 案件削除
         * @description 指定されたIDの案件を削除します
         */
        delete: operations["deleteWork"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/notices": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        /**
         * お知らせ一覧取得
         * @description 指定されたスケジュール帳のお知らせ一覧を取得します
         */
        get: operations["getNotices"];
        put?: never;
        /**
         * お知らせ作成
         * @description 指定されたスケジュール帳に新しいお知らせを作成します
         */
        post: operations["createNotice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/notices/{noticeId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description お知らせID */
                noticeId: number;
            };
            cookie?: never;
        };
        /**
         * お知らせ詳細取得
         * @description 指定されたIDのお知らせ詳細を取得します
         */
        get: operations["getNoticeById"];
        /**
         * お知らせ更新
         * @description 指定されたIDのお知らせを更新します
         */
        put: operations["updateNotice"];
        post?: never;
        /**
         * お知らせ削除
         * @description 指定されたIDのお知らせを削除します
         */
        delete: operations["deleteNotice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/notices/{noticeId}/read": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description お知らせID */
                noticeId: number;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * お知らせを既読にする
         * @description 指定されたIDのお知らせを既読にします
         */
        post: operations["markNoticeAsRead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        /**
         * 統計情報取得
         * @description 指定されたスケジュール帳の統計情報を取得します
         */
        get: operations["getStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 職務経歴書取得
         * @description ユーザーの職務経歴書を取得します
         */
        get: operations["getResume"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description エラーコード */
            code: number;
            /** @description エラーメッセージ */
            message: string;
            details?: {
                /** @description エラーが発生したフィールド */
                field?: string;
                /** @description フィールド固有のエラーメッセージ */
                message?: string;
            }[];
        };
        PaginationMeta: {
            /** @description 合計アイテム数 */
            totalItems: number;
            /** @description ページあたりのアイテム数 */
            itemsPerPage: number;
            /** @description 現在のページ番号 */
            currentPage: number;
            /** @description 合計ページ数 */
            totalPages: number;
        };
        UserCredentials: {
            /**
             * Format: email
             * @description ユーザーのメールアドレス
             */
            email: string;
            /**
             * Format: password
             * @description パスワード
             */
            password: string;
        };
        UserSignup: {
            /** @description ユーザー名 */
            username: string;
            /**
             * Format: email
             * @description メールアドレス
             */
            email: string;
            /**
             * Format: password
             * @description パスワード
             */
            password: string;
        };
        AuthResponse: {
            /** @description JWT認証トークン */
            token: string;
            /** @description リフレッシュトークン */
            refreshToken: string;
            /** @description トークンの有効期限（秒） */
            expiresIn: number;
            user: components["schemas"]["UserBasic"];
        };
        UserBasic: {
            /** @description ユーザーID */
            id: number;
            /** @description ユーザー名 */
            username: string;
            /**
             * Format: email
             * @description メールアドレス
             */
            email: string;
        };
        User: components["schemas"]["UserBasic"] & {
            /** @description 削除フラグ */
            delFlg: boolean;
            /** @description 更新カウント */
            updateCnt: number;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updateTime: string;
            /** @description 更新者ID */
            updateUserId?: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createTime: string;
            /** @description 作成者ID */
            createUserId?: number;
        };
        UserUpdateInput: {
            /** @description ユーザー名 */
            username?: string;
            /**
             * Format: email
             * @description メールアドレス
             */
            email?: string;
            /**
             * Format: password
             * @description パスワード（変更する場合のみ）
             */
            password?: string;
        };
        UserSetting: {
            /** @description ユーザー設定ID */
            id: number;
            /** @description ユーザーID */
            userId: number;
            /** @description 削除フラグ */
            delFlg: boolean;
            /** @description 更新カウント */
            updateCnt: number;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updateTime: string;
            /** @description 更新者ID */
            updateUserId?: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createTime: string;
            /** @description 作成者ID */
            createUserId?: number;
        };
        UserSettingInput: {
            /** @description テーマ設定 */
            theme?: string;
            /** @description 通知設定 */
            notificationEnabled?: boolean;
            /** @description 言語設定 */
            language?: string;
        };
        Book: {
            /** @description スケジュール帳ID */
            id: number;
            /** @description ユーザーID */
            userId: number;
            /** @description 削除フラグ */
            delFlg: boolean;
            /** @description 更新カウント */
            updateCnt: number;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updateTime: string;
            /** @description 更新者ID */
            updateUserId?: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createTime: string;
            /** @description 作成者ID */
            createUserId?: number;
        };
        BookInput: {
            /** @description スケジュール帳名 */
            name: string;
        };
        Category: {
            /** @description カテゴリID */
            id: number;
            /** @description スケジュール帳ID */
            bookId: number;
            /** @description カテゴリ名 */
            categoryName: string;
            /** @description 収入フラグ */
            incomeFlg: boolean;
            /** @description 削除フラグ */
            delFlg: boolean;
            /** @description 更新カウント */
            updateCnt: number;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updateTime: string;
            /** @description 更新者ID */
            updateUserId?: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createTime: string;
            /** @description 作成者ID */
            createUserId?: number;
        };
        CategoryInput: {
            /** @description カテゴリ名 */
            categoryName: string;
            /** @description 収入フラグ */
            incomeFlg: boolean;
        };
        Subcategory: {
            /** @description サブカテゴリID */
            id: number;
            /** @description カテゴリID */
            categoryId: number;
            /** @description サブカテゴリ名 */
            subcategoryName: string;
            /** @description 削除フラグ */
            delFlg: boolean;
            /** @description 更新カウント */
            updateCnt: number;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updateTime: string;
            /** @description 更新者ID */
            updateUserId?: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createTime: string;
            /** @description 作成者ID */
            createUserId?: number;
        };
        SubcategoryInput: {
            /** @description サブカテゴリ名 */
            subcategoryName: string;
        };
        Schedule: {
            /** @description スケジュールID */
            id: number;
            /** @description スケジュール帳ID */
            bookId: number;
            /** @description カテゴリID */
            categoryId?: number;
            /** @description サブカテゴリID */
            subcategoryId?: number;
            /**
             * Format: date-time
             * @description 開始日時
             */
            startTime: string;
            /**
             * Format: date-time
             * @description 終了日時
             */
            endTime: string;
            /** @description タイトル */
            title: string;
            /** @description 備考 */
            remarks?: string;
            /** @description 削除フラグ */
            delFlg: boolean;
            /** @description 更新カウント */
            updateCnt: number;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updateTime: string;
            /** @description 更新者ID */
            updateUserId?: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createTime: string;
            /** @description 作成者ID */
            createUserId?: number;
        };
        ScheduleInput: {
            /** @description カテゴリID */
            categoryId?: number;
            /** @description サブカテゴリID */
            subcategoryId?: number;
            /**
             * Format: date-time
             * @description 開始日時
             */
            startTime: string;
            /**
             * Format: date-time
             * @description 終了日時
             */
            endTime: string;
            /** @description タイトル */
            title: string;
            /** @description 備考 */
            remarks?: string;
        };
        Work: {
            /** @description 案件ID */
            id: number;
            /** @description スケジュール帳ID */
            bookId: number;
            /** @description 案件名 */
            workName: string;
            /**
             * Format: float
             * @description 時給
             */
            hourlyPay?: number;
            /**
             * Format: float
             * @description 単価
             */
            unitPrice?: number;
            /** @description 会社名 */
            company: string;
            /** @description エージェント */
            agent?: string;
            /** @description 備考 */
            remarks?: string;
            /** @description 削除フラグ */
            delFlg: boolean;
            /** @description 更新カウント */
            updateCnt: number;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updateTime: string;
            /** @description 更新者ID */
            updateUserId?: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createTime: string;
            /** @description 作成者ID */
            createUserId?: number;
        };
        WorkInput: {
            /** @description 案件名 */
            workName: string;
            /**
             * Format: float
             * @description 時給
             */
            hourlyPay?: number;
            /**
             * Format: float
             * @description 単価
             */
            unitPrice?: number;
            /** @description 会社名 */
            company: string;
            /** @description エージェント */
            agent?: string;
            /** @description 備考 */
            remarks?: string;
        };
        Notice: {
            /** @description お知らせID */
            id: number;
            /** @description スケジュール帳ID */
            bookId: number;
            /** @description 表示ユーザーID */
            disUserId?: number;
            /** @description 表示権限 */
            disRole?: string;
            /**
             * Format: date
             * @description 日付
             */
            date: string;
            /**
             * Format: date
             * @description 削除日
             */
            delDate?: string;
            /** @description 備考 */
            remarks?: string;
            /** @description 削除フラグ */
            delFlg: boolean;
            /** @description 更新カウント */
            updateCnt: number;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updateTime: string;
            /** @description 更新者ID */
            updateUserId?: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createTime: string;
            /** @description 作成者ID */
            createUserId?: number;
        };
        NoticeInput: {
            /** @description 表示ユーザーID */
            disUserId?: number;
            /** @description 表示権限 */
            disRole?: string;
            /**
             * Format: date
             * @description 日付
             */
            date: string;
            /** @description 備考 */
            remarks?: string;
        };
        NoticeRead: {
            /** @description お知らせ通知ID */
            id: number;
            /** @description お知らせID */
            noticeId: number;
            /** @description ユーザーID */
            userId: number;
            /** @description 削除フラグ */
            delFlg: boolean;
            /** @description 更新カウント */
            updateCnt: number;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updateTime: string;
            /** @description 更新者ID */
            updateUserId?: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createTime: string;
            /** @description 作成者ID */
            createUserId?: number;
        };
        StatisticsResponse: {
            /** @description 総スケジュール数 */
            totalSchedules?: number;
            /** @description 総カテゴリ数 */
            totalCategories?: number;
            /** @description 総案件数 */
            totalWorks?: number;
            incomeStats?: {
                /**
                 * Format: float
                 * @description 総収入
                 */
                totalIncome?: number;
                /**
                 * Format: float
                 * @description 平均収入
                 */
                averageIncome?: number;
            };
            /** @description カテゴリ別スケジュール分布 */
            scheduleDistribution?: {
                [key: string]: number;
            };
            monthlyStats?: {
                /** @description 月（YYYY-MM形式） */
                month?: string;
                /** @description スケジュール数 */
                scheduleCount?: number;
                /**
                 * Format: float
                 * @description 収入
                 */
                income?: number;
            }[];
        };
        ResumeResponse: {
            /** @description ユーザーID */
            userId?: number;
            /** @description ユーザー名 */
            userName?: string;
            works?: components["schemas"]["Work"][];
            totalExperience?: {
                /** @description 経験年数 */
                years?: number;
                /** @description 経験月数 */
                months?: number;
            };
            /** @description スキル一覧 */
            skills?: string[];
        };
    };
    responses: {
        /** @description 認証エラー */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description アクセス権限がありません */
        ForbiddenError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description リソースが見つかりません */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description 不正なリクエスト */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description サーバーエラー */
        ServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description 正常に処理されました（コンテンツなし） */
        NoContent: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description リソースの競合が発生しました */
        ConflictError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description 入力値の検証エラー */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSignup"];
            };
        };
        responses: {
            /** @description ユーザー登録成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            409: components["responses"]["ConflictError"];
            500: components["responses"]["ServerError"];
        };
    };
    signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCredentials"];
            };
        };
        responses: {
            /** @description ログイン成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description リフレッシュトークン */
                    refreshToken: string;
                };
            };
        };
        responses: {
            /** @description トークン更新成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    signOut: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["NoContent"];
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    getMyUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ユーザー情報取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    updateMyUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateInput"];
            };
        };
        responses: {
            /** @description ユーザー情報更新成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    getUserSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ユーザー設定取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSetting"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    updateUserSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSettingInput"];
            };
        };
        responses: {
            /** @description ユーザー設定更新成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSetting"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    getBooks: {
        parameters: {
            query?: {
                /** @description ページ番号 */
                page?: number;
                /** @description 1ページあたりの件数 */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description スケジュール帳一覧取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Book"][];
                        meta?: components["schemas"]["PaginationMeta"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    createBook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookInput"];
            };
        };
        responses: {
            /** @description スケジュール帳作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Book"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    getBookById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description スケジュール帳詳細取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Book"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    updateBook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookInput"];
            };
        };
        responses: {
            /** @description スケジュール帳更新成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Book"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    deleteBook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["NoContent"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    getCategories: {
        parameters: {
            query?: {
                /** @description ページ番号 */
                page?: number;
                /** @description 1ページあたりの件数 */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description カテゴリ一覧取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Category"][];
                        meta?: components["schemas"]["PaginationMeta"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    createCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryInput"];
            };
        };
        responses: {
            /** @description カテゴリ作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            500: components["responses"]["ServerError"];
        };
    };
    getCategoryById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description カテゴリID */
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description カテゴリ詳細取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    updateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description カテゴリID */
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CategoryInput"];
            };
        };
        responses: {
            /** @description カテゴリ更新成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    deleteCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description カテゴリID */
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["NoContent"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    getSubcategories: {
        parameters: {
            query?: {
                /** @description ページ番号 */
                page?: number;
                /** @description 1ページあたりの件数 */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description カテゴリID */
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description サブカテゴリ一覧取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Subcategory"][];
                        meta?: components["schemas"]["PaginationMeta"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    createSubcategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description カテゴリID */
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubcategoryInput"];
            };
        };
        responses: {
            /** @description サブカテゴリ作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subcategory"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            500: components["responses"]["ServerError"];
        };
    };
    getSubcategoryById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description カテゴリID */
                categoryId: number;
                /** @description サブカテゴリID */
                subcategoryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description サブカテゴリ詳細取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subcategory"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    updateSubcategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description カテゴリID */
                categoryId: number;
                /** @description サブカテゴリID */
                subcategoryId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubcategoryInput"];
            };
        };
        responses: {
            /** @description サブカテゴリ更新成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subcategory"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    deleteSubcategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description カテゴリID */
                categoryId: number;
                /** @description サブカテゴリID */
                subcategoryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["NoContent"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    getSchedules: {
        parameters: {
            query?: {
                /** @description カテゴリID */
                categoryId?: number;
                /** @description サブカテゴリID */
                subcategoryId?: number;
                /** @description 開始日時下限 */
                startFrom?: string;
                /** @description 開始日時上限 */
                startTo?: string;
                /** @description 終了日時下限 */
                endFrom?: string;
                /** @description 終了日時上限 */
                endTo?: string;
                /** @description タイトル（部分一致） */
                title?: string;
                /** @description ページ番号 */
                page?: number;
                /** @description 1ページあたりの件数 */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description スケジュール一覧取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Schedule"][];
                        meta?: components["schemas"]["PaginationMeta"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    createSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduleInput"];
            };
        };
        responses: {
            /** @description スケジュール作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schedule"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            500: components["responses"]["ServerError"];
        };
    };
    getScheduleById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description スケジュールID */
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description スケジュール詳細取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schedule"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    updateSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description スケジュールID */
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduleInput"];
            };
        };
        responses: {
            /** @description スケジュール更新成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schedule"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    deleteSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description スケジュールID */
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["NoContent"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    getWorks: {
        parameters: {
            query?: {
                /** @description 会社名（部分一致） */
                company?: string;
                /** @description エージェント名（部分一致） */
                agent?: string;
                /** @description 案件名（部分一致） */
                workName?: string;
                /** @description 最低時給 */
                minHourlyPay?: number;
                /** @description 最高時給 */
                maxHourlyPay?: number;
                /** @description 最低単価 */
                minUnitPrice?: number;
                /** @description 最高単価 */
                maxUnitPrice?: number;
                /** @description ページ番号 */
                page?: number;
                /** @description 1ページあたりの件数 */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 案件一覧取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Work"][];
                        meta?: components["schemas"]["PaginationMeta"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    createWork: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkInput"];
            };
        };
        responses: {
            /** @description 案件作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Work"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            500: components["responses"]["ServerError"];
        };
    };
    getWorkById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description 案件ID */
                workId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 案件詳細取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Work"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    updateWork: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description 案件ID */
                workId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkInput"];
            };
        };
        responses: {
            /** @description 案件更新成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Work"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    deleteWork: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description 案件ID */
                workId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["NoContent"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    getNotices: {
        parameters: {
            query?: {
                /** @description 日付下限 */
                fromDate?: string;
                /** @description 日付上限 */
                toDate?: string;
                /** @description 未読のみ */
                unreadOnly?: boolean;
                /** @description ページ番号 */
                page?: number;
                /** @description 1ページあたりの件数 */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description お知らせ一覧取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Notice"][];
                        meta?: components["schemas"]["PaginationMeta"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    createNotice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoticeInput"];
            };
        };
        responses: {
            /** @description お知らせ作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notice"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            500: components["responses"]["ServerError"];
        };
    };
    getNoticeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description お知らせID */
                noticeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description お知らせ詳細取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notice"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    updateNotice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description お知らせID */
                noticeId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoticeInput"];
            };
        };
        responses: {
            /** @description お知らせ更新成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notice"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    deleteNotice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description お知らせID */
                noticeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["NoContent"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    markNoticeAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
                /** @description お知らせID */
                noticeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components["responses"]["NoContent"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["ServerError"];
        };
    };
    getStatistics: {
        parameters: {
            query?: {
                /** @description 集計開始日 */
                fromDate?: string;
                /** @description 集計終了日 */
                toDate?: string;
            };
            header?: never;
            path: {
                /** @description スケジュール帳ID */
                bookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 統計情報取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatisticsResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
    getResume: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 職務経歴書取得成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResumeResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["ServerError"];
        };
    };
}
